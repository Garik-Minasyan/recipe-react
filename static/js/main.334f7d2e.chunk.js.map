{"version":3,"sources":["components/RecipeDetalis.js","components/Recipe.js","components/Alert.js","components/Header.js","components/App.js","serviceWorker.js","index.js"],"names":["RecipeDetalis","ingredients","map","ingredient","className","key","weight","text","Recipe","recipe","useState","show","setShow","label","image","url","alt","src","href","target","rel","onClick","Alert","alert","Header","App","query","setQuery","recipes","setRecipes","setAlert","getData","a","Axios","get","rezult","data","more","console","log","hits","onSubmit","e","preventDefault","type","placeholder","autoComplete","onChange","value","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gVAceA,G,MAXO,SAAC,GACrB,OADyC,EAAlBC,YACJC,KAAI,SAACC,GACtB,OACE,yBAAKC,UAAU,aAAaC,IAAKF,EAAWG,QAC1C,yBAAKF,UAAU,mBAAmBD,EAAWI,MAC7C,yBAAKH,UAAU,qBAAqBD,EAAWG,OAA/C,mBCmBOE,G,MAvBA,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAChB,EAAwBC,oBAAS,GAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA2CH,EAAOA,OAA1CI,EAAR,EAAQA,MAAOC,EAAf,EAAeA,MAAOC,EAAtB,EAAsBA,IAAKd,EAA3B,EAA2BA,YAC3B,OACE,yBAAKG,UAAU,UACb,4BAAKS,GACL,yBAAKG,IAAKH,EAAOI,IAAKH,IACtB,yBAAKV,UAAU,cACb,uBACEA,UAAU,aACVc,KAAMH,EACNI,OAAO,SACPC,IAAI,uBAJN,OAQA,4BAAQC,QAAS,kBAAMT,GAASD,KAAhC,eACCA,GAAQ,kBAAC,EAAD,CAAeV,YAAaA,QCf9BqB,EAJD,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACf,OAAO,6BAAMA,ICQAC,G,MARA,WACb,OACE,yBAAKpB,UAAU,UACb,4CC8DSqB,G,MA7DH,WACV,MAA0Bf,mBAAS,IAAnC,mBAAOgB,EAAP,KAAcC,EAAd,KACA,EAA8BjB,mBAAS,IAAvC,mBAAOkB,EAAP,KAAgBC,EAAhB,KACA,EAA0BnB,mBAAS,IAAnC,mBAAOa,EAAP,KAAcO,EAAd,KAMMf,EAAG,0CAAsCW,EAAtC,mBAJM,WAIN,oBAFO,oCAIVK,EAAO,uCAAG,4BAAAC,EAAA,yDACA,KAAVN,EADU,iCAESO,IAAMC,IAAInB,GAFnB,WAENoB,EAFM,QAGAC,KAAKC,KAHL,yCAIHP,EAAS,2BAJN,OAMZQ,QAAQC,IAAIJ,GACZN,EAAWM,EAAOC,KAAKI,MACvBV,EAAS,IACTH,EAAS,IATG,wBAWZG,EAAS,wBAXG,4CAAH,qDAuBb,OACE,yBAAK1B,UAAU,OACb,kBAAC,EAAD,MACA,yBAAKA,UAAU,QACb,0BAAMA,UAAU,cAAcqC,SAZnB,SAACC,GAChBA,EAAEC,iBACFZ,MAWiB,KAAVR,GAAgB,kBAAC,EAAD,CAAOA,MAAOA,IAC/B,2BACEnB,UAAU,aACVwC,KAAK,OACLC,YAAY,cACZC,aAAa,MACbC,SAdO,SAACL,GAChBf,EAASe,EAAEvB,OAAO6B,QAcVA,MAAOtB,IAET,2BAAOtB,UAAU,eAAewC,KAAK,SAASI,MAAM,aAGxD,yBAAK5C,UAAU,WACZwB,IAAY,IACXA,EAAQ1B,KAAI,SAACO,GAAD,OACV,kBAAC,EAAD,CAAQJ,IAAKI,EAAOA,OAAOM,IAAKN,OAAQA,W,MCjDhCwC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5B,QAAQ4B,MAAMA,EAAMC,c","file":"static/js/main.334f7d2e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./../css/recipeDetalis.css\";\r\n\r\nconst RecipeDetalis = ({ ingredients }) => {\r\n  return ingredients.map((ingredient) => {\r\n    return (\r\n      <div className=\"ingredient\" key={ingredient.weight}>\r\n        <div className=\"ingredient-text\">{ingredient.text}</div>\r\n        <div className=\"ingredient-weight\">{ingredient.weight} - Weight</div>\r\n      </div>\r\n    );\r\n  });\r\n};\r\n\r\nexport default RecipeDetalis;\r\n","import React, { useState } from \"react\";\r\nimport RecipeDetalis from \"./RecipeDetalis\";\r\nimport \"./../css/recipe.css\";\r\n\r\nconst Recipe = ({ recipe }) => {\r\n  const [show, setShow] = useState(false);\r\n  const { label, image, url, ingredients } = recipe.recipe;\r\n  return (\r\n    <div className=\"recipe\">\r\n      <h6>{label}</h6>\r\n      <img alt={label} src={image} />\r\n      <div className=\"url-button\">\r\n        <a\r\n          className=\"url-recipe\"\r\n          href={url}\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferror\"\r\n        >\r\n          URL\r\n        </a>\r\n        <button onClick={() => setShow(!show)}>ingredients</button>\r\n        {show && <RecipeDetalis ingredients={ingredients} />}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Recipe;\r\n","import React from \"react\";\r\n\r\nconst Alert = ({ alert }) => {\r\n  return <div>{alert}</div>;\r\n};\r\n\r\nexport default Alert;\r\n","import React from \"react\";\r\nimport \"./../css/header.css\";\r\n\r\nconst Header = () => {\r\n  return (\r\n    <div className=\"header\">\r\n      <h2>Good Food</h2>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React, { useState } from \"react\";\r\nimport Axios from \"axios\";\r\nimport Recipe from \"./Recipe\";\r\nimport Alert from \"./Alert\";\r\nimport Header from \"./Header\";\r\nimport \"./../css/app.css\";\r\n\r\nconst App = () => {\r\n  const [query, setQuery] = useState(\"\");\r\n  const [recipes, setRecipes] = useState([]);\r\n  const [alert, setAlert] = useState(\"\");\r\n\r\n  const APP_ID = \"fa72c720\";\r\n\r\n  const APP_KEY = \"22b924308c94814e1ebd24de2e47d3e5\";\r\n\r\n  const url = `https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`;\r\n\r\n  const getData = async () => {\r\n    if (query !== \"\") {\r\n      const rezult = await Axios.get(url);\r\n      if (!rezult.data.more) {\r\n        return setAlert(\"No food with such name\");\r\n      }\r\n      console.log(rezult);\r\n      setRecipes(rezult.data.hits);\r\n      setAlert(\"\");\r\n      setQuery(\"\");\r\n    } else {\r\n      setAlert(\"Please fill the form\");\r\n    }\r\n  };\r\n\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n    getData();\r\n  };\r\n\r\n  const onChange = (e) => {\r\n    setQuery(e.target.value);\r\n  };\r\n  return (\r\n    <div className=\"app\">\r\n      <Header />\r\n      <div className=\"form\">\r\n        <form className=\"search-form\" onSubmit={onSubmit}>\r\n          {alert !== \"\" && <Alert alert={alert} />}\r\n          <input\r\n            className=\"form-input\"\r\n            type=\"text\"\r\n            placeholder=\"Search Food\"\r\n            autoComplete=\"off\"\r\n            onChange={onChange}\r\n            value={query}\r\n          />\r\n          <input className=\"input-submit\" type=\"submit\" value=\"search\" />\r\n        </form>\r\n      </div>\r\n      <div className=\"recipes\">\r\n        {recipes !== [] &&\r\n          recipes.map((recipe) => (\r\n            <Recipe key={recipe.recipe.url} recipe={recipe} />\r\n          ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./components/App\";\r\nimport \"./index.css\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}